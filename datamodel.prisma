# 느낌표는 필수 일때 
# unique 는 fk pk
# 배열은 해당 요소 여러개 일때 
# 데이터 모델 자기자신에대해 관계형성이 가능

# mutation create 사용자를 생성하는거
# connect 생성된 사용자가 있으면 연결
# disconnect 


#datamodel.prisma 는 db에 동기화될 테이블 필드 만 동기화하면된다
# fragment 를 위한 type들을 위해 deploy 할필욘없음

type User {
  id: ID! @id
  avatar: String @default(
    value:"https://i0.wp.com/www.winhelponline.com/blog/wp-content/uploads/2017/12/user.png?resize=256%2C256&quality=100&ssl=1"
  )
  username: String! @unique
  password : String! @password
  email: String! @unique
  firstName: String @default(value: "")
  lastName: String
  bio: String
  following: [User!]! @relation(name: "FollowRelation")
  followers: [User!]! @relation(name: "FollowRelation")
  posts: [Post!]! @relation(name: "PostsOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
  plan : [Plan!]! @relation(name : "PlansOfUser", onDelete: CASCADE )
  rooms:[Room!]!
  loginSecret:String
  location: Location @relation(name: "LocationOfUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Location {
  id: ID! @id
  user: User! @relation(link: TABLE , name: "LocationOfUser")
  address: String
  latitude: Float
  longitude: Float
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Post {
  id: ID! @id
  location: String
  caption: String!
  user: User @relation(name: "PostsOfUser")
  files: [File!]! @relation(name:"FilesOfPost", onDelete:CASCADE)
  likes: [Like!]! @relation(name:"LikeOfPost", onDelete:CASCADE)
  comments: [Comment!]! @relation(name: "CommentOfPost", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type File {
  id: ID! @id
  url: String!
  post: Post @relation(name: "FilesOfPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Like {
  id: ID! @id
  user: User @relation(name: "LikesOfUser")
  post: Post @relation(name:"LikeOfPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Comment {
  id: ID! @id
  text: String!
  user: User @relation(name: "CommentsOfUser")
  post: Post @relation(name: "CommentOfPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Room {
  id: ID! @id
  participants: [User!]!
  messages:[Message!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Message {
  id: ID! @id
  text: String! 
  from: User!  @relation(name:"From")
  to: User! @relation(name:"To")
  room:Room!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Exercise {
  id: ID! @id
  title : String!
  image : String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Plan {
  id: ID! @id
  user: User! @relation(name: "PlansOfUser")
  planTitle : String!
  exerciseType : Exercise!
  exerciseDate : DateTime!
  exerciseTime : String!
  planImage: String
  activity : [Activity!]!  @relation(name: "PlansOfActivity", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Activity {
  id: ID! @id
  plan : Plan! @relation(name : "PlansOfActivity")
  title : String!
  second : Int
  count : Int
  set : String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}