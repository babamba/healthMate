# 느낌표는 필수 일때
# unique 는 fk pk
# 배열은 해당 요소 여러개 일때
# 데이터 모델 자기자신에대해 관계형성이 가능

# mutation create 사용자를 생성하는거
# connect 생성된 사용자가 있으면 연결
# disconnect

type User {
  id: ID!
  avatar: String
  username: String!
  email: String!
  password: String!

  bio: String
  following: [User!]!
  followers: [User!]!
  posts: [Post!]!
  likes: [Like!]!
  comments: [Comment!]!
  rooms: [Room!]!
  loginSecret: String
  plan: [Plan!]!
  schedules: [Schedule!]!
  location: Location
  # location: Location
  # computed
  fullName: String
  isFollowing: Boolean!
  isSelf: Boolean!
  followingCount: Int!
  followersCount: Int!
  postsCount: Int!
  createdAt: String
  updatedAt: String
  lastPlan: [Plan]
}

type Location {
  id: ID!
  user: User!
  address: String
  latitude: Float
  longitude: Float
  createdAt: String
  updatedAt: String
}

# type Location {
#   id: ID!
#   user: User!
#   latitude: Float
#   longitude: Float
# }

type Post {
  id: ID!
  location: String
  caption: String!
  user: User!
  files: [File!]!
  likes: [Like!]!
  comments: [Comment!]!
  isLiked: Boolean!
  likeCount: Int!
  commentCount: Int!
  createdAt: String
  updatedAt: String
}

type Like {
  id: ID!
  user: User!
  post: Post!
  createdAt: String
  updatedAt: String
}

type Comment {
  id: ID!
  text: String!
  user: User!
  post: Post!
  createdAt: String
  updatedAt: String
}

type File {
  id: ID!
  url: String!
  post: Post!
  createdAt: String
  updatedAt: String
}

type Room {
  id: ID!
  participants: [User!]!
  messages: [Message!]!
  lastMessage: [Message!]!
  person: [User!]!
  me: User!
  createdAt: String
  updatedAt: String
}

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
  createdAt: String
  updatedAt: String
}

type Exercise {
  id: ID!
  title: String!
  image: String!
  createdAt: String
  updatedAt: String
}

type Plan {
  id: ID!
  user: User!
  planTitle: String
  exerciseType: Exercise!
  planImage: String
  activity: [Activity!]!
  createdAt: String
  updatedAt: String
}

type Activity {
  id: ID!
  plan: [Plan!]
  title: String!
  second: Int
  count: Int
  set: String
  createdAt: String
  updatedAt: String
}

type Schedule {
  id: ID!
  user: User!
  plan: [Plan!]
  exerciseDate: String!
  isChecked: Boolean
  createdAt: String
  updatedAt: String
  # computed
  date: String
  time: String
}
